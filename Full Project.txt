#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include "FreeRTOS.h"
#include "tm4c123gh6pm.h"
#include "task.h"
#include "FreeRTOSConfig.h"
#include "queue.h"
#include "semphr.h"
#include "inc/tm4c123gh6pm.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/i2c.h"
#include "driverlib/pin_map.h"
#include "driverlib/i2c.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/lcd.h"
#include "TM4C123.h"
#include "LCD_I2C.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/qei.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"

#ifndef GPIO_PD6_PHA0
#define GPIO_PD6_PHA0 0x00031806
#endif

#ifndef GPIO_PD7_PHB0
#define GPIO_PD7_PHB0 0x00031C06
#endif

#define MAX_POS_CM 40
#define MIN_POS_CM 0

// Driver control pins
#define DRIVER_UP_PIN    GPIO_PIN_4  // PB4
#define DRIVER_DOWN_PIN  GPIO_PIN_5  // PB5

// Passenger control pins
#define PASSENGER_UP_PIN   GPIO_PIN_6  // PA6
#define PASSENGER_DOWN_PIN GPIO_PIN_7  // PA7

// Window lock pin
#define PASSENGER_LOCK_PIN GPIO_PIN_6  // PB6

// Limit switches
#define UPPER_LIMIT_PIN GPIO_PIN_0  // PB0
#define LOWER_LIMIT_PIN GPIO_PIN_1  // PB1

// IR obstacle sensor
#define IR_SENSOR_PIN GPIO_PIN_7  // PB7

// Buzzer
#define BUZZER_PIN GPIO_PIN_5  // PA5

// Debounce time for auto mode detection (in ms)
#define AUTO_MODE_THRESHOLD 1000

// Emergency reverse duration (in ms)
#define EMERGENCY_REVERSE_TIME_MS 500  // 1.5 seconds reverse time
#define REVERSE_SPEED_DELAY_MS 10       // Control loop delay
#define CM_PER_SECOND 15                // Calibrate based on your motor speed
void LCD_ClearLine(uint8_t line);
// Position tracking
volatile uint32_t position_cm = 0;

// Semaphore for motor control
SemaphoreHandle_t xMotorSemaphore;

// Global flag for emergency state
volatile bool emergencyStop = false;

void delay_ms(int time) {
    int i, j;
    for (i = 0; i < time; i++)
        for (j = 0; j < 3180; j++) {}
}

void QEI0_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_QEI0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_QEI0));
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOD));

    // Unlock PD7
    HWREG(GPIO_PORTD_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTD_BASE + GPIO_O_CR) |= 0x80;
    HWREG(GPIO_PORTD_BASE + GPIO_O_LOCK) = 0;

#ifdef GPIO_PD6_PHA0
    GPIOPinConfigure(GPIO_PD6_PHA0);
#endif
#ifdef GPIO_PD7_PHB0
    GPIOPinConfigure(GPIO_PD7_PHB0);
#endif
    GPIOPinTypeQEI(GPIO_PORTD_BASE, GPIO_PIN_6 | GPIO_PIN_7);
    GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_6 | GPIO_PIN_7,
                     GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

    QEIDisable(QEI0_BASE);
    QEIConfigure(QEI0_BASE,
                 QEI_CONFIG_CAPTURE_A_B |
                 QEI_CONFIG_NO_RESET |
                 QEI_CONFIG_QUADRATURE |
                 QEI_CONFIG_SWAP,
                 0xFFFFFFFF);
    QEIPositionSet(QEI0_BASE, 0);
    QEIEnable(QEI0_BASE);
}

void Motor_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF));

    GPIOUnlockPin(GPIO_PORTF_BASE, GPIO_PIN_0);
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x1F;
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;

    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3);
}

void Buzzer_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA));
    
    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, BUZZER_PIN);
    GPIOPinWrite(GPIO_PORTA_BASE, BUZZER_PIN, 0); // Turn off initially
}

void Buzzer_On(void) {
    GPIOPinWrite(GPIO_PORTA_BASE, BUZZER_PIN, BUZZER_PIN);
}

void Buzzer_Off(void) {
    GPIOPinWrite(GPIO_PORTA_BASE, BUZZER_PIN, 0);
}

void Motor_Up(void) {
    if (xSemaphoreTake(xMotorSemaphore, portMAX_DELAY) == pdTRUE) {
        LCD_ClearLine(0);
        LCD_Print("Closing..   ");
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_2);
        xSemaphoreGive(xMotorSemaphore);
    }
}

void Motor_Down(void) {
    if (xSemaphoreTake(xMotorSemaphore, portMAX_DELAY) == pdTRUE) {
        LCD_ClearLine(0);
        LCD_Print("Opening..   ");
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_3);
        xSemaphoreGive(xMotorSemaphore);
    }
}

void Motor_Stop(void) {
    if (xSemaphoreTake(xMotorSemaphore, portMAX_DELAY) == pdTRUE) {
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3, 0);
        xSemaphoreGive(xMotorSemaphore);
    }
}

void LCD_DisplayPosition(uint32_t cm) {
    char buffer[16];
    sprintf(buffer, "Pos: %lu cm   ", cm);
    LCD_SetCursor(1, 0);
    LCD_Print(buffer);
}
void LCD_ClearLine(uint8_t line) {
    LCD_SetCursor(line, 0);
    LCD_Print("                "); // 16 spaces to clear the line
    LCD_SetCursor(line, 0);
}

void Buttons_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA));

    // Initialize driver and passenger control buttons
    GPIOPinTypeGPIOInput(GPIO_PORTB_BASE, DRIVER_UP_PIN | DRIVER_DOWN_PIN | PASSENGER_LOCK_PIN | IR_SENSOR_PIN);
    GPIOPadConfigSet(GPIO_PORTB_BASE, DRIVER_UP_PIN | DRIVER_DOWN_PIN | PASSENGER_LOCK_PIN | IR_SENSOR_PIN,
                     GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

    // Initialize limit switches
    GPIOPinTypeGPIOInput(GPIO_PORTB_BASE, UPPER_LIMIT_PIN | LOWER_LIMIT_PIN);
    GPIOPadConfigSet(GPIO_PORTB_BASE, UPPER_LIMIT_PIN | LOWER_LIMIT_PIN,
                     GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

    // Initialize passenger control buttons
    GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, PASSENGER_UP_PIN | PASSENGER_DOWN_PIN);
    GPIOPadConfigSet(GPIO_PORTA_BASE, PASSENGER_UP_PIN | PASSENGER_DOWN_PIN,
                     GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
}

bool IsButtonPressed(uint32_t port, uint8_t pin) {
    return (GPIOPinRead(port, pin) & pin) == 0;
}

bool IsUpperLimitReached(void) {
    return IsButtonPressed(GPIO_PORTB_BASE, UPPER_LIMIT_PIN);
}

bool IsLowerLimitReached(void) {
    return IsButtonPressed(GPIO_PORTB_BASE, LOWER_LIMIT_PIN);
}

bool IsObstacleDetected(void) {
    return IsButtonPressed(GPIO_PORTB_BASE, IR_SENSOR_PIN);
}

bool IsAutoMode(uint32_t port, uint8_t pin) {
    // Auto mode is triggered by a short press (< AUTO_MODE_THRESHOLD)
    if (IsButtonPressed(port, pin)) {
        uint32_t start_time = xTaskGetTickCount();
        while (IsButtonPressed(port, pin)) {
            if ((xTaskGetTickCount() - start_time) > pdMS_TO_TICKS(AUTO_MODE_THRESHOLD)) {
                return false; // Button held long enough for manual mode
            }
        }
        return true; // Button released quickly (auto mode)
    }
    return false;
}

void EmergencyTask(void *pvParameters) {
    TickType_t xLastWakeTime = xTaskGetTickCount();
    const TickType_t xFrequency = pdMS_TO_TICKS(10); // Check every 10ms
    
    for (;;) {
        // Only check when not already in emergency and window is closing
        if (!emergencyStop && IsObstacleDetected() && 
            (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_2 | GPIO_PIN_3) == GPIO_PIN_2)) {
            
            emergencyStop = true;
            
            // 1. Immediate stop
            Motor_Stop();
            
            // 2. Alert user
            Buzzer_On();
            LCD_ClearLine(0);
            LCD_Print("OBSTACLE!!");
            vTaskDelay(pdMS_TO_TICKS(500)); 
            
            // 3. Begin controlled reverse
            Motor_Down();
            
            // 4. Precise timing and position tracking
            TickType_t xStartTime = xTaskGetTickCount();
            while ((xTaskGetTickCount() - xStartTime) < pdMS_TO_TICKS(EMERGENCY_REVERSE_TIME_MS)) {
                if (IsLowerLimitReached()) break;
                
                // Accurate position decrement based on actual movement
                static uint32_t lastUpdate = 0;
                uint32_t now = xTaskGetTickCount();
                
                // Update position every 100ms for smoother decrement
                if (now - lastUpdate >= pdMS_TO_TICKS(100)) {
                    if (position_cm > MIN_POS_CM) {
                        position_cm--;  // Decrement by 1cm per 100ms
                        LCD_DisplayPosition(position_cm);
                    }
                    lastUpdate = now;
                }
                
                vTaskDelay(pdMS_TO_TICKS(10));
            }
            
            // 5. Clean shutdown
            Motor_Stop();
            Buzzer_Off();
            emergencyStop = false;
            
            // Final position update
            LCD_DisplayPosition(position_cm);
             LCD_ClearLine(0);  
            LCD_Print("SAFE           ");
            vTaskDelay(pdMS_TO_TICKS(500));
        }
        
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
    }
}


void DriverControlTask(void *pvParameters) {
    for (;;) {
        if (emergencyStop) {
            vTaskDelay(pdMS_TO_TICKS(100));
            continue;
        }

        // Up button pressed (closing window)
        if (IsButtonPressed(GPIO_PORTB_BASE, DRIVER_UP_PIN)) {
            bool auto_mode = IsAutoMode(GPIO_PORTB_BASE, DRIVER_UP_PIN);
            
            if (auto_mode) {
                // Auto mode - close completely
                LCD_SetCursor(0, 0);
								LCD_Clear;
                LCD_Print("Auto Closing");
                while (!IsUpperLimitReached() && !IsObstacleDetected() && position_cm < MAX_POS_CM && !emergencyStop) {
                    Motor_Up();
                    position_cm++;
                    LCD_DisplayPosition(position_cm);
                    delay_ms(100);
                }
            } else {
                // Manual mode - close while button held
                LCD_SetCursor(0, 0);
								LCD_Clear;
                LCD_Print("Manual Closing");
                while (IsButtonPressed(GPIO_PORTB_BASE, DRIVER_UP_PIN) && 
                       !IsUpperLimitReached() && !IsObstacleDetected() && position_cm < MAX_POS_CM && !emergencyStop) {
                    Motor_Up();
                    position_cm++;
                    LCD_DisplayPosition(position_cm);
                    delay_ms(100);
                }
            }
            Motor_Stop();
            
            // Update position if limit switch was hit
            if (IsUpperLimitReached()) {
                position_cm = MAX_POS_CM;
                LCD_DisplayPosition(position_cm);
                LCD_SetCursor(0, 0);
								LCD_Clear;
                LCD_Print("Upper Limit   ");
            }
        }

        // Down button pressed (opening window)
        if (IsButtonPressed(GPIO_PORTB_BASE, DRIVER_DOWN_PIN)) {
            bool auto_mode = IsAutoMode(GPIO_PORTB_BASE, DRIVER_DOWN_PIN);
            
            if (auto_mode) {
                // Auto mode - open completely
                LCD_SetCursor(0, 0);
                LCD_Print("Auto Opening");
                while (!IsLowerLimitReached() && position_cm > MIN_POS_CM && !emergencyStop) {
                    Motor_Down();
                    position_cm--;
                    LCD_DisplayPosition(position_cm);
                    delay_ms(100);
                }
            } else {
                // Manual mode - open while button held
                LCD_SetCursor(0, 0);
								LCD_Clear;
                LCD_Print("Manual Opening");
                while (IsButtonPressed(GPIO_PORTB_BASE, DRIVER_DOWN_PIN) && 
                       !IsLowerLimitReached() && position_cm > MIN_POS_CM && !emergencyStop) {
                    Motor_Down();
                    position_cm--;
                    LCD_DisplayPosition(position_cm);
                    delay_ms(100);
                }
            }
            Motor_Stop();
            
            // Update position if limit switch was hit
            if (IsLowerLimitReached()) {
                position_cm = MIN_POS_CM;
                LCD_DisplayPosition(position_cm);
                LCD_SetCursor(0, 0);
								LCD_Clear;
                LCD_Print("Lower Limit   ");
            }
        }

        vTaskDelay(pdMS_TO_TICKS(50));
    }
}

void PassengerControlTask(void *pvParameters) {
    static char lastMessage[16] = "";

    for (;;) {
        if (emergencyStop) {
            vTaskDelay(pdMS_TO_TICKS(100));
            continue;
        }

        if (IsButtonPressed(GPIO_PORTB_BASE, PASSENGER_LOCK_PIN)) {
            // Passenger control disabled
            if (strcmp(lastMessage, "Pass. Disable") != 0) {
                LCD_SetCursor(0, 0);
                LCD_Print("Pass. Disable ");
                strcpy(lastMessage, "Pass. Disable");
                delay_ms(2000);
                LCD_Clear();
            }
        } else {
            // Up button pressed (closing window)
            if (IsButtonPressed(GPIO_PORTA_BASE, PASSENGER_UP_PIN)) {
                bool auto_mode = IsAutoMode(GPIO_PORTA_BASE, PASSENGER_UP_PIN);
                
                if (auto_mode) {
                    // Auto mode - close completely
                    LCD_SetCursor(0, 0);
                    LCD_Print("Auto Closing");
                    while (!IsUpperLimitReached() && !IsObstacleDetected() && position_cm < MAX_POS_CM && !emergencyStop) {
                        Motor_Up();
                        position_cm++;
                        LCD_DisplayPosition(position_cm);
                        delay_ms(100);
                    }
                } else {
                    // Manual mode - close while button held
                    LCD_SetCursor(0, 0);
                    LCD_Print("Manual Closing");
                    while (IsButtonPressed(GPIO_PORTA_BASE, PASSENGER_UP_PIN) && 
                           !IsUpperLimitReached() && !IsObstacleDetected() && position_cm < MAX_POS_CM && !emergencyStop) {
                        Motor_Up();
                        position_cm++;
                        LCD_DisplayPosition(position_cm);
                        delay_ms(100);
                    }
                }
                Motor_Stop();
                
                if (IsUpperLimitReached()) {
                    position_cm = MAX_POS_CM;
                    LCD_DisplayPosition(position_cm);
                    LCD_SetCursor(0, 0);
                    LCD_Print("Upper Limit   ");
                }
            }

            // Down button pressed (opening window)
            if (IsButtonPressed(GPIO_PORTA_BASE, PASSENGER_DOWN_PIN)) {
                bool auto_mode = IsAutoMode(GPIO_PORTA_BASE, PASSENGER_DOWN_PIN);
                
                if (auto_mode) {
                    // Auto mode - open completely
                    LCD_SetCursor(0, 0);
                    LCD_Print("Auto Opening");
                    while (!IsLowerLimitReached() && position_cm > MIN_POS_CM && !emergencyStop) {
                        Motor_Down();
                        position_cm--;
                        LCD_DisplayPosition(position_cm);
                        delay_ms(100);
                    }
                } else {
                    // Manual mode - open while button held
                    LCD_SetCursor(0, 0);
                    LCD_Print("Manual Opening");
                    while (IsButtonPressed(GPIO_PORTA_BASE, PASSENGER_DOWN_PIN) && 
                           !IsLowerLimitReached() && position_cm > MIN_POS_CM && !emergencyStop) {
                        Motor_Down();
                        position_cm--;
                        LCD_DisplayPosition(position_cm);
                        delay_ms(100);
                    }
                }
                Motor_Stop();
                
                if (IsLowerLimitReached()) {
                    position_cm = MIN_POS_CM;
                    LCD_DisplayPosition(position_cm);
                    LCD_SetCursor(0, 0);
                    LCD_Print("Lower Limit   ");
                }
            }
        }

        vTaskDelay(pdMS_TO_TICKS(50));
    }
}

int main(void) {
    SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL |
                   SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    // Create semaphore for motor control
    xMotorSemaphore = xSemaphoreCreateMutex();
    
    QEI0_Init();
    Motor_Init();
    Buzzer_Init();
    Buttons_Init();
    LCD_Init();
    LCD_SetBacklight(1);
    LCD_Clear();
    LCD_SetCursor(0, 0);
    LCD_Print("Power Window");

    // Create tasks with priorities (Emergency has highest priority)
    xTaskCreate(EmergencyTask, "Emergency", 128, NULL, 3, NULL);
    xTaskCreate(DriverControlTask, "Driver", 128, NULL, 2, NULL);
    xTaskCreate(PassengerControlTask, "Passenger", 128, NULL, 1, NULL);

    vTaskStartScheduler();
    while (1) {}
}

void vApplicationIdleHook(void) {
    // Enter low-power sleep mode
    __asm("    WFI");  // Wait For Interrupt (CPU sleeps until interrupt)
}
