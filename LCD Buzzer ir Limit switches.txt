#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "FreeRTOS.h"
#include "tm4c123gh6pm.h"
#include "task.h"
#include "FreeRTOSConfig.h"
#include "queue.h"
#include "semphr.h"
#include "inc/tm4c123gh6pm.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/i2c.h"
#include "driverlib/pin_map.h"
#include "driverlib/i2c.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/lcd.h"
#include "TM4C123.h"
#include "LCD_I2C.h"
#include <stdint.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
// Hardware Definitions
#define RED_LED     (1U << 1)   // PF1
#define BLUE_LED    (1U << 2)   // PF2
#define GREEN_LED   (1U << 3)   // PF3
#define IR_SENSOR   (1U << 7)   // PB7
#define LIMIT_UP    (1U << 0)   // PB0 
#define LIMIT_DN    (1U << 1)   // PB1
#define BUZZER 			(1U << 5)  	// PA5

typedef enum {
    EVENT_IR_DETECTED,
    EVENT_IR_CLEAR,
    EVENT_LIMIT_UP,
    EVENT_LIMIT_DN
} SystemEvent_t;

QueueHandle_t xEventQueue;

// ---------- Hardware Initialization ----------
void InitHardware(void) {
    // Enable clocks
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
		// Enable clock for Port A
		SYSCTL->RCGCGPIO |= (1U << 0);  
		
GPIOA->DATA &= ~BUZZER;  // Start with buzzer OFF
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF));
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));
		while ((SYSCTL->PRGPIO & (1U << 0)) == 0);  // Wait until ready

		// Configure PA5 as output (Buzzer)
		GPIOA->DIR |= BUZZER;    
		GPIOA->DEN |= BUZZER;    
    // Unlock GPIOF
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x0E;

    // Set PF1-3 as output for LEDs
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, RED_LED | BLUE_LED | GREEN_LED);

    // Set PB0, PB1, PB7 as input with pull-ups
    GPIOPinTypeGPIOInput(GPIO_PORTB_BASE, IR_SENSOR | LIMIT_UP | LIMIT_DN);
    GPIOPadConfigSet(GPIO_PORTB_BASE, IR_SENSOR | LIMIT_UP | LIMIT_DN,
                     GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
}

// ---------- LCD Handler ----------
void vEventHandlerTask(void *pvParameters) {
    LCD_Init();
    LCD_SetBacklight(1);
    LCD_Clear();
    LCD_Print("System Ready");

    SystemEvent_t event;
    while (1) {
        if (xQueueReceive(xEventQueue, &event, portMAX_DELAY)) {
            LCD_Clear();
            switch (event) {
								case EVENT_IR_DETECTED:
										GPIOPinWrite(GPIO_PORTF_BASE, RED_LED | BLUE_LED | GREEN_LED, BLUE_LED);
										GPIOA->DATA |= BUZZER;  // Turn on buzzer
										LCD_Clear();
										LCD_Print("IR: Detected");
										break;

								case EVENT_IR_CLEAR:
										GPIOPinWrite(GPIO_PORTF_BASE, RED_LED | BLUE_LED | GREEN_LED, 0);
										GPIOA->DATA &= ~BUZZER;  // Turn off buzzer
										LCD_Clear();
										LCD_Print("IR: Clear");
										break;
                case EVENT_LIMIT_UP:
                    GPIOPinWrite(GPIO_PORTF_BASE, RED_LED | BLUE_LED | GREEN_LED, RED_LED);
                    LCD_Print("LIMIT: UP");
                    break;
                case EVENT_LIMIT_DN:
                    GPIOPinWrite(GPIO_PORTF_BASE, RED_LED | BLUE_LED | GREEN_LED, GREEN_LED);
                    LCD_Print("LIMIT: DOWN");
                    break;
            }
        }
    }
}

// ---------- Sensor Polling ----------
void vSensorPollTask(void *pvParameters) {
    uint8_t lastIR = 1, lastUp = 1, lastDn = 1;
    while (1) {
        uint8_t currIR = GPIOPinRead(GPIO_PORTB_BASE, IR_SENSOR) ? 1 : 0;
        uint8_t currUp = GPIOPinRead(GPIO_PORTB_BASE, LIMIT_UP) ? 1 : 0;
        uint8_t currDn = GPIOPinRead(GPIO_PORTB_BASE, LIMIT_DN) ? 1 : 0;

        if (currIR != lastIR) {
            lastIR = currIR;
            SystemEvent_t evt = currIR ? EVENT_IR_CLEAR : EVENT_IR_DETECTED;
            xQueueSend(xEventQueue, &evt, 0);
        }

        if (currUp != lastUp) {
            lastUp = currUp;
            if (!currUp) {
                SystemEvent_t evt = EVENT_LIMIT_UP;
                xQueueSend(xEventQueue, &evt, 0);
            }
        }

        if (currDn != lastDn) {
            lastDn = currDn;
            if (!currDn) {
                SystemEvent_t evt = EVENT_LIMIT_DN;
                xQueueSend(xEventQueue, &evt, 0);
            }
        }

        vTaskDelay(pdMS_TO_TICKS(50));
    }
}

// ---------- Main ----------
int main(void) {
    InitHardware();

    xEventQueue = xQueueCreate(10, sizeof(SystemEvent_t));
    if (xEventQueue == NULL) while (1);  // Queue failed

    xTaskCreate(vEventHandlerTask, "EventTask", 256, NULL, 2, NULL);
    xTaskCreate(vSensorPollTask, "PollTask", 256, NULL, 1, NULL);

    vTaskStartScheduler();

    while (1); // Should never reach here
}